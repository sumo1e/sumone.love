<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sumit Kumar</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Sumit Kumar's website</description>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Objective of RHCSA</title>
      <link>http://localhost:1313/blog/objective-of-rhcsa/</link>
      <pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/objective-of-rhcsa/</guid>
      <description>&lt;p&gt;Study points for the exam&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RHCSA exam candidates should be able to accomplish the tasks below without assistance. These have been grouped into several categories.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Understand and use essential tools&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Access a shell prompt and issue commands with correct syntax
    Use input-output redirection (&amp;gt;, &amp;gt;&amp;gt;, |, 2&amp;gt;, etc.)
    Use grep and regular expressions to analyze text
    Access remote systems using SSH
    Log in and switch users in multiuser targets
    Archive, compress, unpack, and uncompress files using tar, gzip, and bzip2
    Create and edit text files
    Create, delete, copy, and move files and directories
    Create hard and soft links
    List, set, and change standard ugo/rwx permissions
    Locate, read, and use system documentation including man, info, and files in /usr/share/doc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create simple shell scripts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Conditionally execute code (use of: if, test, [], etc.)
    Use Looping constructs (for, etc.) to process file, command line input
    Process script inputs ($1, $2, etc.)
    Processing output of shell commands within a script
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Operate running systems&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Boot, reboot, and shut down a system normally
    Boot systems into different targets manually
    Interrupt the boot process in order to gain access to a system
    Identify CPU/memory intensive processes and kill processes
    Adjust process scheduling
    Manage tuning profiles
    Locate and interpret system log files and journals
    Preserve system journals
    Start, stop, and check the status of network services
    Securely transfer files between systems
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure local storage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    List, create, delete partitions on MBR and GPT disks
    Create and remove physical volumes
    Assign physical volumes to volume groups
    Create and delete logical volumes
    Configure systems to mount file systems at boot by universally unique ID (UUID) or label
    Add new partitions and logical volumes, and swap to a system non-destructively
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create and configure file systems&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Create, mount, unmount, and use vfat, ext4, and xfs file systems
    Mount and unmount network file systems using NFS
    Configure autofs
    Extend existing logical volumes
    Create and configure set-GID directories for collaboration
    Diagnose and correct file permission problems
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deploy, configure, and maintain systems&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Schedule tasks using at and cron
    Start and stop services and configure services to start automatically at boot
    Configure systems to boot into a specific target automatically
    Configure time service clients
    Install and update software packages from Red Hat Network, a remote repository, or from the local file system
    Modify the system bootloader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Manage basic networking&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Configure IPv4 and IPv6 addresses
    Configure hostname resolution
    Configure network services to start automatically at boot
    Restrict network access using firewall-cmd/firewall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Manage users and groups&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Create, delete, and modify local user accounts
    Change passwords and adjust password aging for local user accounts
    Create, delete, and modify local groups and group memberships
    Configure superuser access
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Manage security&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Configure firewall settings using firewall-cmd/firewalld
    Manage default file permissions
    Configure key-based authentication for SSH
    Set enforcing and permissive modes for SELinux
    List and identify SELinux file and process context
    Restore default file contexts
    Manage SELinux port labels
    Use boolean settings to modify system SELinux settings
    Diagnose and address routine SELinux policy violations
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Manage containers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Find and retrieve container images from a remote registry
    Inspect container images
    Perform container management using commands such as podman and skopeo
    Build a container from a Containerfile
    Perform basic container management such as running, starting, stopping, and listing running containers
    Run a service inside a container
    Configure a container to start automatically as a systemd service
    Attach persistent storage to a container
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create Your Own git server</title>
      <link>http://localhost:1313/blog/create-git-server/</link>
      <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/create-git-server/</guid>
      <description>&lt;p&gt;[I] Create user Name git&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;useradd -m git -d /var/git -s (any shell bin path)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[II] Setup passwd of git user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; sudo passwd git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[III] Copy ssh pub key from already exist user or set your own&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp -r .ssh /git user home dir path...

[***]See the authorized_keys file Content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[IV] Make git user normal user to root user&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; sudo usermod -aG sudo git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[V] Give Permissions and Change Ownership of .ssh dir&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chmod 700 .ssh &amp;amp;&amp;amp; sudo chmod 600 authorized_keys

sudo chown git .ssh &amp;amp;&amp;amp; sudo chown git .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[VI] Add user or group of in /usr/ssh/sshd_config file allowuser or allowgroups  *username&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; sudo usermod -aG ssh-access *user_name 

 vim /etc/ssh/sshd_config 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[VI] rstart the sshd deamon&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; service sshd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[VI] Create Bare Repo for Git server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git init --bare /projects/*.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[VII] push and ferch url&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  git remote add (remote name) git@hostname:projects/*.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[^_^] Now you can push and Fetch the repo using thie url&lt;/p&gt;
&lt;p&gt;URL:git@hostname:projects/*git&lt;/p&gt;
&lt;p&gt;So, Creating git server in your home in very easy&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
